// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios18.4-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name TelusDigitalVirtualAssistant
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
import AVFoundation
import AVKit
import AppKit
import CommonCrypto
import DeveloperToolsSupport
import Foundation
import IQKeyboardManagerSwift
import ImageIO
import JavaScriptCore
import MapKit
import Photos
import ProgressHUD
import SDWebImage
import Speech
import Swift
import SwiftUI
import SwiftyXMLParser
import UIKit
import WebKit
import XMPPFramework
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency final public class SwiftSignatureView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency weak final public var delegate: (any TelusDigitalVirtualAssistant.SwiftSignatureDelegate)?
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency final public var strokeWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency final public var strokeColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency final public var signatureBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency final public var doesContainSignature: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override final public func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency final public func clear()
  @_Concurrency.MainActor @preconcurrency final public func getSignature(scale: CoreFoundation.CGFloat = 1) -> UIKit.UIImage?
  @_Concurrency.MainActor @preconcurrency final public func getCroppedSignature(scale: CoreFoundation.CGFloat = 1) -> UIKit.UIImage?
  @_Concurrency.MainActor @preconcurrency final public func getPDFSignature() -> Foundation.Data
  @objc deinit
}
@objc public protocol SwiftSignatureDelegate {
  @objc func didStart()
  @objc @available(*, unavailable, renamed: "didStart()")
  func startedDrawing()
  @objc func didFinish()
  @objc @available(*, unavailable, renamed: "didFinish()")
  func finishedDrawing()
}
extension Foundation.URL {
  public var queryParameters: [Swift.String : Swift.String]? {
    get
  }
}
@objc public protocol TDVirtualAssistantDelegate {
  @objc func didTapCloseChatbot()
  @objc optional func initiateNativeCallTransfer(data: [Swift.String : Any]?)
  @objc optional func oldSessionNotClaimedStartNewConversationWithNewJID()
  @objc optional func chatClosedByAgent()
}
public class TDVirtualAssistant {
  public init()
  public var delegate: (any TelusDigitalVirtualAssistant.TDVirtualAssistantDelegate)?
  public func initWith(botId: Swift.String, environment: TelusDigitalVirtualAssistant.BotEnvironment? = .mqa, customData: TelusDigitalVirtualAssistant.VACustomData? = nil, isChatTool: Swift.Bool = false, jid: Swift.String = "", query: Swift.String = "", isStartNewSession: Swift.Bool = false) -> UIKit.UIViewController
  @objc deinit
}
public struct VACustomData {
  public init(userName: Swift.String? = "", displayName: Swift.String? = "", email: Swift.String? = "", phone: Swift.String? = "", language: Swift.String = "", businessDomain: Swift.String? = "", province: Swift.String? = "", tid: Swift.String? = "", brand: Swift.String? = "", productType: Swift.String? = "", extraData: [Swift.String : Any]? = [:], isGroupSSO: Swift.Bool = false, groupSssoJid: Swift.String = "", groupSsoToken: Swift.String = "")
}
public enum BotEnvironment {
  case mdev
  case mqa
  case stage
  case tiiaProd
  case tvaProd
  case kvaProd
  case chatGPT
  case custom(apiUrl: Swift.String, xmppHost: Swift.String, xmppPort: Swift.String)
}
public struct Sender {
  public let id: Swift.String
  public let displayName: Swift.String
  public init(id: Swift.String, displayName: Swift.String)
}
extension TelusDigitalVirtualAssistant.Sender : Swift.Equatable {
  public static func == (left: TelusDigitalVirtualAssistant.Sender, right: TelusDigitalVirtualAssistant.Sender) -> Swift.Bool
}
@_hasMissingDesignatedInitializers open class CryptoJS {
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class AES : TelusDigitalVirtualAssistant.CryptoJS {
    open func encrypt(_ message: Swift.String, password: Swift.String, options: Any? = nil) -> Swift.String
    open func decrypt(_ message: Swift.String, password: Swift.String, options: Any? = nil) -> Swift.String
    @objc deinit
  }
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class TripleDES : TelusDigitalVirtualAssistant.CryptoJS {
    open func encrypt(_ message: Swift.String, password: Swift.String) -> Swift.String
    open func decrypt(_ message: Swift.String, password: Swift.String) -> Swift.String
    @objc deinit
  }
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class DES : TelusDigitalVirtualAssistant.CryptoJS {
    open func encrypt(_ message: Swift.String, password: Swift.String) -> Swift.String
    open func decrypt(_ message: Swift.String, password: Swift.String) -> Swift.String
    @objc deinit
  }
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class MD5 : TelusDigitalVirtualAssistant.CryptoJS {
    open func hash(_ string: Swift.String) -> Swift.String
    @objc deinit
  }
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class SHA1 : TelusDigitalVirtualAssistant.CryptoJS {
    open func hash(_ string: Swift.String) -> Swift.String
    @objc deinit
  }
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class SHA224 : TelusDigitalVirtualAssistant.CryptoJS {
    open func hash(_ string: Swift.String) -> Swift.String
    @objc deinit
  }
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class SHA256 : TelusDigitalVirtualAssistant.CryptoJS {
    open func hash(_ string: Swift.String) -> Swift.String
    @objc deinit
  }
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class SHA384 : TelusDigitalVirtualAssistant.CryptoJS {
    open func hash(_ string: Swift.String) -> Swift.String
    @objc deinit
  }
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class SHA512 : TelusDigitalVirtualAssistant.CryptoJS {
    open func hash(_ string: Swift.String) -> Swift.String
    @objc deinit
  }
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class SHA3 : TelusDigitalVirtualAssistant.CryptoJS {
    open func hash(_ string: Swift.String, outputLength: Swift.Int? = nil) -> Swift.String
    @objc deinit
  }
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class RIPEMD160 : TelusDigitalVirtualAssistant.CryptoJS {
    open func hash(_ string: Swift.String, outputLength: Swift.Int? = nil) -> Swift.String
    @objc deinit
  }
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class mode : TelusDigitalVirtualAssistant.CryptoJS {
    @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class CFB : TelusDigitalVirtualAssistant.CryptoJS {
      @objc deinit
    }
    @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class CTR : TelusDigitalVirtualAssistant.CryptoJS {
      @objc deinit
    }
    @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class OFB : TelusDigitalVirtualAssistant.CryptoJS {
      @objc deinit
    }
    @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class ECB : TelusDigitalVirtualAssistant.CryptoJS {
      @objc deinit
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class pad : TelusDigitalVirtualAssistant.CryptoJS {
    @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class AnsiX923 : TelusDigitalVirtualAssistant.CryptoJS {
      @objc deinit
    }
    @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class Iso97971 : TelusDigitalVirtualAssistant.CryptoJS {
      @objc deinit
    }
    @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class Iso10126 : TelusDigitalVirtualAssistant.CryptoJS {
      @objc deinit
    }
    @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class ZeroPadding : TelusDigitalVirtualAssistant.CryptoJS {
      @objc deinit
    }
    @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class NoPadding : TelusDigitalVirtualAssistant.CryptoJS {
      @objc deinit
    }
    @objc deinit
  }
  @objc deinit
}
extension Swift.String {
  public func convertHtmlToAttributedStringWithCSS(font: UIKit.UIFont?, csscolor: Swift.String, lineheight: Swift.Int, csstextalign: Swift.String) -> Foundation.NSAttributedString?
}
extension Swift.String {
  public func trimHTMLTags() -> Swift.String?
}
extension Swift.String {
  public var withoutHtml: Swift.String {
    get
  }
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor @preconcurrency public func loadGif(name: Swift.String)
  @available(iOS 9.0, *)
  @_Concurrency.MainActor @preconcurrency public func loadGif(asset: Swift.String)
}
extension UIKit.UIImage {
  public class func gif(data: Foundation.Data) -> UIKit.UIImage?
  public class func gif(url: Swift.String) -> UIKit.UIImage?
  public class func gif(name: Swift.String) -> UIKit.UIImage?
  @available(iOS 9.0, *)
  public class func gif(asset: Swift.String) -> UIKit.UIImage?
}
